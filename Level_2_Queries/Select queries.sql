--SELECT QUERIES

--Query to find the top 3 buyers who have placed the highest number
-- of orders along with the total amount spent by each buyer.

SELECT 
    B.buyer_id, 
    B.buyer_name, 
    COUNT(O.order_id) AS total_orders, 
    SUM(P.price * IP.quantity) AS total_spent--new col
FROM 
    Buyers B
JOIN 
    Orders O ON B.buyer_id = O.buyer_id
JOIN 
    include_products IP ON O.order_id = IP.order_id
JOIN 
    Products P ON IP.product_id = P.product_id -- for every product check its price 
GROUP BY 
    B.buyer_id, B.buyer_name
ORDER BY 
    total_spent DESC
FETCH FIRST 3 ROWS ONLY;



--This query calculates the average rating of products in each category
--, along with the category name and the number of reviews for each category.

SELECT 
    C.category_name,
    AVG(R.rating) AS average_rating,
    COUNT(R.review_id) AS review_count
FROM 
    Categories C
JOIN 
    Products P ON C.category_id = P.category_id
JOIN 
    Reviews R ON P.product_id = R.product_id
GROUP BY 
    C.category_name
ORDER BY 
    average_rating DESC;



--This query finds the total number of products sold
 --by each seller and the total revenue generated by each seller.
 
SELECT 
    S.seller_id,
    S.seller_name,
    COUNT(SL.product_id) AS total_products_sold,
    SUM(P.price * IP.quantity) AS total_revenue
FROM 
    Sellers S
JOIN 
    sell SL ON S.seller_id = SL.seller_id
JOIN 
    Products P ON SL.product_id = P.product_id
JOIN 
    include_products IP ON P.product_id = IP.product_id
GROUP BY 
    S.seller_id, S.seller_name
ORDER BY 
    total_revenue DESC;--
    
    
--most popular products by counting the number of orders each product
-- has received and then ordering the results by the number of orders in descending order.    
    
SELECT
    P.product_id,
    P.product_name,
    COUNT(IP.product_id) AS order_count
FROM
    Products P -- we want also the non ordred product
LEFT JOIN
    include_products IP ON P.product_id = IP.product_id
GROUP BY
    P.product_id, P.product_name
ORDER BY
    order_count DESC;
    

--delete categories that have not had any products sold    
DELETE FROM Categories
WHERE category_id NOT IN (
    SELECT DISTINCT p.category_id -- DISTINCT because a few products from same category can be sold
    FROM Products p
    JOIN sell s ON p.product_id = s.product_id
);
    

--deletes buyers who have neither placed any orders nor written any reviews.
DELETE FROM Buyers
WHERE buyer_id IN (
    SELECT B.buyer_id
    FROM Buyers B
    WHERE B.buyer_id NOT IN (
        SELECT O.buyer_id
        FROM Orders O
    )
    AND B.buyer_id NOT IN (
        SELECT R.buyer_id
        FROM Reviews R
    )
);



--UPDATE


--updates the price of all products in a specific category by a certain percentage.
UPDATE 
    Products
SET 
    price = price * 1.10
WHERE 
    category_id =
    (SELECT category_id
     FROM Categories
     WHERE category_name = 'Computer Accessories');
     
     
     
--updates the delivery method to 'home delivery' for all orders placed in the last month and bought more than 5 items for one of the order products
UPDATE 
    OrderDetails OD
SET 
    delivery_method = 'home delivery'
WHERE 
    
    OD.order_id IN (
        SELECT o.order_id
        FROM Orders o 
        join include_products ip ON ip.order_id = o.order_id 
        WHERE o.order_date >= TRUNC(SYSDATE, 'MM') - INTERVAL '1' MONTH AND ip.quantity > 4  --trunc cut the date for a specific format of date here first day of the curr month
        -- interval = jump back one month
    );
    
    
    
-- update the stock of certain categroy's products
UPDATE 
    Products
SET 
    stock = stock + 10
WHERE 
    category_id =
    (SELECT category_id
     FROM Categories
     WHERE category_name = 'Computer Accessories');
     


UPDATE 
    OrderDetails OD
SET 
    order_status = 'pending'
WHERE 
    
    OD.order_id = 313575;
    
    
select *
from orderdetails
join orders o on o.order_id = orderdetails.order_id
where o.order_id = 313575    


    
    
    
    
    
